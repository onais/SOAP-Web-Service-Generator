<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="StoredProcedureTypeName" #>
<#@ parameter type="System.String" name="StoredProcedureParams" #>
<#@ parameter type="System.String[,]" name="filterParams" #>
<#@ parameter type="System.String" name="createParams" #>
<#@ parameter type="System.String" name="updateParams" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="System.Boolean" name="isCreate" #>
<#@ parameter type="System.Boolean" name="isUpdate" #>
<#@ parameter type="System.Boolean" name="isDelete" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="ModelMetadataStoredProcedure" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>

namespace <#= Namespace #>
{
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
  
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", BindAttributeIncludeText);
    }
    else
    {
        bindAttribute = String.Empty;
    }
#>
    public class <#= ControllerName #> : Controller
    {
        private <#= ContextTypeName #> db = new <#= ContextTypeName #>();

        public ActionResult Index()
        {
            return View();
        }
		[HttpGet]
        public ActionResult GetAjaxData()
        {
            #region Build Order by Clause And Pagination parameters

            int displayStart = 1;
            int displayLength = 10;
            int sortColIndex = 0;
            int totalSortingCols;
            string orderByColumnDir = "asc";
            int pageNum = 1;
            if (Request.Params["sEcho"] != null)
            {
                displayStart = Int32.Parse(Request.Params["iDisplayStart"]);
                displayLength = Int32.Parse(Request.Params["iDisplayLength"]);
                pageNum = (int)Math.Ceiling((double)displayStart / displayLength) + 1;

                int.TryParse(Request.Params["iSortingCols"], out totalSortingCols);

                for (int i = 0; i < totalSortingCols; i++)
                {
                    sortColIndex = Int32.Parse(Request.Params[String.Format("iSortCol_{0}", i)]);

                    orderByColumnDir = Request.Params[String.Format("sSortDir_{0}", i)];
                }
            }
            #endregion
			int? count = 0;

			<# int i=0; for (i=0;i<filterParams.Length;i++) { if(filterParams[i,0]==null) break; #>
				<#= filterParams[i,0] #> <#= filterParams[i,1] #> = null;
			<# } #>
			<# for (i=0;i<filterParams.Length;i++) { if(filterParams[i,0]==null) break; #>
			<# if(filterParams[i,0].Contains("tring")){ #>
				  if (Request["sSearch_<#= i #>"].Length > 0 && !Request["sSearch_<#= i #>"].Equals("undefined"))
                <#=  filterParams[i,1] #> = Request["sSearch_<#= i #>"];
            <# } else { #>
			  if (Request["sSearch_<#= i #>"].Length > 0 && !Request["sSearch_<#= i #>"].Equals("undefined"))
                <#=  filterParams[i,1] #> = <#=filterParams[i,0].Substring(0,filterParams[i,0].Length-1)#>.Parse(Request["sSearch_<#= i #>"]);
			<# } #>
			<# } #>
            List<<#= StoredProcedureTypeName #>_Result>  lst = db.<#= StoredProcedureTypeName #>(<#=StoredProcedureParams#> sortColIndex, orderByColumnDir, pageNum, displayLength).ToList();
            if (lst.Count > 0)
            {
                count = lst.First().TotalRows;
            }

            var Data = lst.Select(d => new string[] {   
<#=ModelMetadataStoredProcedure #>
			}).ToArray();
            return Json(new
            {
                aaData = Data,
                iTotalDisplayRecords = count,
                iTotalRecords = count,
                sEcho = Request.Params["sEcho"]

            }, JsonRequestBehavior.AllowGet);
        }

        <# if(isDelete) {#>
        [HttpPost]
        public ActionResult DeleteConfirmed(<#= primaryKeyShortTypeName #> id)
        {
		    int isSuccess = db.sp<#= entitySetName #>Delete(id).FirstOrDefault().Value;

            if (isSuccess == 2)
            {
                return Json("يوجد معطيات متصلة بهذا العميل. الرجاء التأكد من حذف هذه المعطيات أولا...");
            }
            else
            {
                return Json("success");
            }
        }
		<#}#>

		<# if(isUpdate) {#>
		public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#=ModelTypeName#> <#=Char.ToLowerInvariant(ModelTypeName[0]) + ModelTypeName.Substring(1)#> = db.<#=ModelTypeName#>.Find(id);
            if (city == null)
            {
                return HttpNotFound();
            }
            return View(<#=Char.ToLowerInvariant(ModelTypeName[0]) + ModelTypeName.Substring(1)#>);
        }

		[HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(<#=ModelTypeName#> <#=Char.ToLowerInvariant(ModelTypeName[0]) + ModelTypeName.Substring(1)#>)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    db.sp<#=ModelTypeName#>Update(<#=updateParams#>);
                    TempData.Remove("Msg");
                    TempData.Remove("MsgType");
                    TempData.Add("Msg", "تم التعديل بنجاح");
                    TempData.Add("MsgType", "success");
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    TempData.Remove("Msg");
                    TempData.Remove("MsgType");
                    TempData.Add("Msg", "هناك خطب ما الرجاء الإتصال بالإدارة");
                    TempData.Add("MsgType", "error");
                }
            }
            return View(<#=Char.ToLowerInvariant(ModelTypeName[0]) + ModelTypeName.Substring(1)#>);
        }
		<#}#>
		<# if(isCreate) {#>
		public ActionResult Create()
        {
            return View();
        }

		[HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(<#=ModelTypeName#> <#=Char.ToLowerInvariant(ModelTypeName[0]) + ModelTypeName.Substring(1)#>)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    db.spCityAdd(<#=createParams#>);
                    TempData.Remove("MsgType");
                    TempData.Add("Msg", "تمت الإضافة بنجاح");
                    TempData.Add("MsgType", "success");
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    TempData.Remove("Msg");
                    TempData.Remove("MsgType");
                    TempData.Add("Msg", "هناك خطب ما الرجاء الإتصال بالإدارة");
                    TempData.Add("MsgType", "error");
                }
            }

            return View(<#=Char.ToLowerInvariant(ModelTypeName[0]) + ModelTypeName.Substring(1)#>);
        }
		<#}#>
      
    }
}
